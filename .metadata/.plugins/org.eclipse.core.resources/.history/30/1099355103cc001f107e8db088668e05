package chapter03;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Date;

public class D_Package3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// Date 클래스 : 날짜를 다루는 클래스
		// Date 클래스의 대부분의 메서드는 Java 1.1부터 사용하지 않도록 권장.
		// Date 클래스가 날짜의 데이터 타입으로 자주 사용됨. (실제 날짜를 관리할 땐 문자열이 편함)
		
		Date dateNow = new Date();
		System.out.println(dateNow.getDate());
		
		// LocalDateTime : Java 8부터 Date 클래스를 대체하기 위해 사용되는 클래스
		// LocalDate 클래스, LocalTime 클래스, LocalDateTime 클래스
		// 생성자를 이용해서 인스턴스를 생성하지 않음.
		
		// 현재 날짜 및 시간의 인스턴스 생성
		LocalDateTime now = LocalDateTime.now();
		LocalDate nowDate = LocalDate.now();
		LocalTime nowTime = LocalTime.now();
		System.out.println(now);
		System.out.println(nowDate);
		System.out.println(nowTime);
		
		// 특정 시간 및 날짜의 인스턴스 생성	
		LocalDateTime date1 = LocalDateTime.of(2025, 1,6,0,0,0);
		System.out.println(date1);
		
		// 특정 날짜 및 시간의 요소 불러오기
		int month = now.getMonthValue();
		System.out.println(month);
		
		// 특정 날짜 및 시간의 요소 변경하기
		// withXXX()
		// 인스턴스가 직접 변경되는 것이 아니고 변경된 인스턴스를 생성하여 반환
		
		now = now.withYear(2020).withHour(1);
		System.out.println(now);
		
		// 날짜 및 시간 계산하기
		// plusXXX(), minusXXX()
		// 마찬가지로 인스턴스가 직접 변경되지 않고 변경된 인스턴스를 생성하여 반환.
		
		// LocalDateTime을 Date로 변경
		// 레거시 코드나 일부 라이브러리와의 호환성을 위해 java.util.Date 형식으로 변환해야 할 필요가 있을 수 있다.
		// Date 클래스의 from 메서드와 LocalDateTime 인스턴스의 toInstant 메서드를 활용
		Date localToDate = Date.from(now.atZone(ZoneId.systemDefault()).toInstant());
		// LocalDateTime 객체를 우선 시스템 기본 시간대(ZoneId.systemDefault())에 해당하는 
		// ZonedDateTime으로 변환한다. 
		// 그 후, ZonedDateTime의 toInstant() 메서드를 사용해 Instant 객체를 얻은 뒤, 
		// 이를 Date.from() 메서드의 인자로 전달하여 Date 객체를 생성한다.
		System.out.println(localToDate);
	}

}
