package chapter02;

// 상속 : 객체지향 프로그래밍의 특성 중 하나.
// 원래 존재하던 클래스를 '확장'하여 재사용할 수 있도록 하는 것
// 코드의 중복을 제거하여 코드 재사용성, 유지 보수성, 확장성을 높일 수 있다.
// extends 키워드를 사용

// class SubClass extends SuperClass { ... }
class Human{
	String name;
	int age;
	
	Human() {}
	
	// 부모 클래스의 생성자는 상속되지 않는다.(확장되지 않는다.)
	Human(String name, int age){
		this.name = name;
		this.age = age;
	}
	
	void sleep() {
		System.out.println(name + "이 잠을 잔다.");
	}
}

class Korean {
	static String country = "대한민국";
	
	void sleep() {
		System.out.println("01시에 잠을 잔다.");
	}
}
// 자바에서는 단일 상속만 지원함.
// 다중 상속에 발생할 수 있는 다이아몬드 문제가 발생하지 않도록 하기 위함.
// 다이아몬드 문제 : 다중 상속으로 인해 동일한 이름의 메서드를 상속받은 상태에서 어떤 메서드를 선택해야 할지 모호해지는 문제
// 인터페이스를 사용하여 다중 상속 효과를 볼 수 있음, 중첩 상속을 사용하여 다중 상속 효과를 볼 수 있음.
class Firefighter extends Human{
	String position;
	
	// Human 클래스의 sleep 메서드를 오버로딩한 것.
	void sleep(int time) {
		System.out.println(name + "이 "+ time + "시에 잠을 잔다.");
	}
	
	void firefight() {
		System.out.println("소방활동을 한다.");
	}
}

class Police extends Human {
	String rank;
	
	Police(){
		// super() : 부모 클래스의 생성자를 지칭하는 키워드
		super("이향", 32);
		// super : 부모 클래스를 지칭하는 키워드
		//super.name="이향";
		//age=32;
		rank = "경감";
	}
	
	void patrol() {
		System.out.println("순찰을 한다.");
	}
}
// 자바의 모든 클래스느느 Object 클래스를 최상위 클래스로 상속받아 사용되고있다.
public class E_Inheritance {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Firefighter firefighter = new Firefighter();
		firefighter.name = "이도";
		System.out.println(firefighter.name);
		
		Police police = new Police();
		police.sleep();

	}

}
