package chapter03;

import java.util.InputMismatchException;
import java.util.Scanner;

// 에러 : 주로 프로그램에서 복구할 수 없는 심각한 문제
// 자원 부족이 큰 원인을 차지
// 개발자가 대처할 수 없는 수준

// - 컴파일 에러 : 소스 코드에 문법을 준수하지 않았을 때 발생
// 1. 문법 오류 : 괄호, 세미콜론 등의 잘못된 사용
// 2. 타입 불일치 : 변수의 타입이나 메서드의 반환 타입이 일치하지 않을 때 발생.
// 3. 미선언 변수 : 선언하지 않은 변수나 메서드, 클래스를 사용하려 할 때(오타)

// - 런타임 에러 : 프로그램 실행 중에 발생
// 1. 외부 서비스와의 연결 실패 
// 2. 라이브러리 버전 불일치

// 예외 : 프로그램이 정상적으로 실행 중인 상태에서 발생할 수 있는 예상치 못한 상황.
// 에러는 발생시 프로그램 실행 자체가 안되지만 예외는 정상적으로 실행된 상태에서 발생.
// 개발자가 직접 처리 및 예방할 수 있음


public class A_ErrorAndException {

	public static void main(String[] args) {
		// 예외 처리 방법
		// try-catch 구문을 사용하여 처리 가능
		
		// try { 예외가 발생할 수 있는 구문 }
		// catch ( 예외 클래스 변수 ) { 특정 예외가 발생하면 실행되는 구문 }
		
		// try 구문 안에 있는 코드는 자원소모를 많이 한다. = 성능을 떨어뜨린다.
		// 컴퓨터 내부 자체에서 코드를 읽고 검수하고, 읽고 검수하고를 반복해서
		
		double first = 0;
		double second = 0;
		try {
			Scanner scanner = new Scanner(System.in);
			System.out.println("첫번쨰 숫자 : ");
			// 예외 발생 가능 위치
			double first = scanner.nextDouble();
			System.out.println("두번째 숫자 : ");
			// 예외 발생 가능 위치
			double second = scanner.nextDouble();
			
			
		} catch (InputMismatchException exception) {
			System.out.println("숫자만 입력하세요");
		} catch () {};
		
		double addingResult = first + second;
		double subtractionResult = first - second;
		double multiplicationResult = first * second;
		double divisionResult = first / second;
		
		System.out.println("덧셈 결과 : " + addingResult);
		System.out.println("뺼셈 결과 : " + subtractionResult);
		System.out.println("곱셈 결과 : " + multiplicationResult);
		System.out.println("나눗셈 결과 : " + divisionResult);
		
		scanner.close();
		System.out.println("연산이 완료되었습니다.");
		
		
		
		
		
		
		
	}

}
