package chapter02;

// 상속 : 객체지향 프로그래밍의 특성 중 하나.
// 원래 존재하던 클래스를 '확장'하여 재사용할 수 있도록 하는 것
// 코드의 중복을 제거하여 코드 재사용성, 유지 보수성, 확장성을 높일 수 있다.
// extends 키워드를 사용

// class SubClass extends SuperClass { ... }
class Human{
	String name;
	int age;
	
	void sleep() {
		System.out.println(name + "이 잠을 잔다.");
	}
}

class Firefighter {
	String name;
	int age;
	String position;
	
	void sleep() {
		System.out.println(name + "이 잠을 잔다.");
	}
	
	void firefight() {
		System.out.println("소방활동을 한다.");
	}
}

class Police {
	String name;
	int age;
	String rank;
	
	void sleep() {
		System.out.println(name + "이 잠을 잔다.");
	}
	
	void patrol() {
		System.out.println("순찰을 한다.");
	}
}
public class E_Inheritance {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		

	}

}
