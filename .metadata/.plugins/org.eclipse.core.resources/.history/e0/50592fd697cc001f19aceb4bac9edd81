package chapter03;

import java.util.ArrayList;
import java.util.List;

// 제너릭 : 클래스나 메서드에서 사용할 데이터 타입을 외부에서 지정하는 방법

// 아래의 경우는 코드중복=유지보수성을 떨어뜨리고 개발속도도 떨어뜨리는 상태.
// 실사용의 불편. 사용 시 코드가 복잡해짐.
class Test1 {
	String subject;
	int score;
}

// 과목 점수를 더 세밀하게 따지는 경우.
class Test2 {
	String subject;
	double score;
}

// 숫자가 아니라 등급으로 점수를 매기는 경우.
class Test3{
	String subject;
	char score;
}

// Test4의 문제점
// 타입의 안정성을 낮춤.
// 컴파일 언어의 장점을 낮춤. 차라리 인터프리터를 쓰지 라는 말이 나옴.
class Test4{
	String subject;
	Object score;
}

// 제너릭 클래스 : 클래스 내부에 있는 데이터 타입을 컴파일 시에 결정.
// class 클래스명 <매개타입(일반적으로 대문자로 잘 씀)> {}

class Test5<S> {
	String subject;
	S score;
}

public class F_Generic {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		List<Test4> tests = new ArrayList<Test4>();
		Test4 test1 = new Test4();
		test1.subject = "국어";
		test1.score = "우수";
		tests.add(test1);
		
		Test4 test2 = new Test4();
		test2.subject = "수학";
		test2.score = 100;
		tests.add(test2);
		
		// 터짐.
		// Object 타입으로 지정하면 모든 타입을 받을 수는 있지만
		// 사용 시 타입을 지정함에 있어서 안전성이 떨어짐.
		//int score = (int) tests.get(0).score;
		
		// 제너릭으로 지정하면 컴파일 시 타입을 결정하여
		// 원하는 형태의 데이터 타입으로 사용할 수 있다.
		Test5<Integer> instance1 = new Test5<>();
		// 안됨. Integer가 아니라서.
		// instance1.score = "우수";
		instance1.score = 100;

	}

}
